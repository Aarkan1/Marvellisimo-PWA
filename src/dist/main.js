!function(e){var t={};function s(i){if(t[i])return t[i].exports;var a=t[i]={i:i,l:!1,exports:{}};return e[i].call(a.exports,a,a.exports,s),a.l=!0,a.exports}s.m=e,s.c=t,s.d=function(e,t,i){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)s.d(i,a,function(t){return e[t]}.bind(null,a));return i},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=0)}([function(e,t,s){"use strict";s.r(t),s.d(t,"eventBus",(function(){return H}));"serviceWorker"in navigator&&(navigator.serviceWorker.controller||navigator.serviceWorker.register("./serviceWorker.js",{scope:"./"}));const{Stitch:i,RemoteMongoClient:a}=stitch,r=i.initializeDefaultAppClient("marvellisimo-xebqg"),n=r.getServiceClient(a.factory,"mongodb-atlas").db("marvellisimo"),o=n.collection("users"),l=n.collection("send"),c=n.collection("subs");var d={template:'\n  <div id="home" class="container">\n    <h1 class="marvel-logo">Marvellisimo</h1>\n    <div class="page-buttons">\n      <router-link to="/search">\n      <button class="menu-item btn-flat waves-effect waves-light">\n        <i class="material-icons">search</i>\n        <p>Search</p>\n      </button>\n      </router-link>\n      <router-link to="/received-messages">\n      <button class="menu-item btn-flat waves-effect waves-light">\n        <i class="material-icons">chat</i>\n        <p>Received Messages</p>\n      </button>\n      </router-link>\n      <router-link to="/friends">\n      <button class="menu-item btn-flat waves-effect waves-light">\n        <i class="material-icons">people_alt</i>\n        <p>Friends</p>\n      </button>\n      </router-link>\n      <router-link to="/favorites">\n      <button class="menu-item btn-flat waves-effect waves-light">\n        <i class="material-icons">favorite_border</i>\n        <p>Favorites</p>\n      </button>\n      </router-link>\n    </div>\n  </div>\n  ',created(){this.$store.commit("setLogo","Marvellisimo")}},h={template:'\n    <div @click="goToDetails" class="card small waves-effect waves-light">\n      <div class="card-image">\n        <img :src="data.thumbnail.path.replace(\'http://\', \'https://\') + \'.\' + data.thumbnail.extension" />\n      </div>\n      <div class="card-content">\n      <span class="card-title">\n        {{ data.name || data.title }}\n      </span> \n      <i @click.stop="updateFavorite" class="material-icons">{{ isFavorited ? \'favorite\' : \'favorite_border\'}}</i>\n      </div>\n    </div>\n  ',props:["data","char"],computed:{isFavorited(){if(!this.$store.state.user)return;let e=!!this.data.name;return this.$store.state.user[e?"favoriteCharacters":"favoriteSeries"].filter(e=>e==this.data.id).length>0}},methods:{updateFavorite(){let e=!!this.data.name,t=this.$store.state.user[e?"favoriteCharacters":"favoriteSeries"];this.isFavorited?t.splice(t.indexOf(this.data.id),1):!t.includes(this.data.id)&&t.push(this.data.id),this.$store.dispatch("updateUser"),this.$emit("updateFavorite",this.data.id)},goToDetails(){this.$router.push({path:"/details/"+this.data.id,query:{char:this.char}})}}};function u(e,t){var s=e[0],i=e[1],a=e[2],r=e[3];s=m(s,i,a,r,t[0],7,-680876936),r=m(r,s,i,a,t[1],12,-389564586),a=m(a,r,s,i,t[2],17,606105819),i=m(i,a,r,s,t[3],22,-1044525330),s=m(s,i,a,r,t[4],7,-176418897),r=m(r,s,i,a,t[5],12,1200080426),a=m(a,r,s,i,t[6],17,-1473231341),i=m(i,a,r,s,t[7],22,-45705983),s=m(s,i,a,r,t[8],7,1770035416),r=m(r,s,i,a,t[9],12,-1958414417),a=m(a,r,s,i,t[10],17,-42063),i=m(i,a,r,s,t[11],22,-1990404162),s=m(s,i,a,r,t[12],7,1804603682),r=m(r,s,i,a,t[13],12,-40341101),a=m(a,r,s,i,t[14],17,-1502002290),s=p(s,i=m(i,a,r,s,t[15],22,1236535329),a,r,t[1],5,-165796510),r=p(r,s,i,a,t[6],9,-1069501632),a=p(a,r,s,i,t[11],14,643717713),i=p(i,a,r,s,t[0],20,-373897302),s=p(s,i,a,r,t[5],5,-701558691),r=p(r,s,i,a,t[10],9,38016083),a=p(a,r,s,i,t[15],14,-660478335),i=p(i,a,r,s,t[4],20,-405537848),s=p(s,i,a,r,t[9],5,568446438),r=p(r,s,i,a,t[14],9,-1019803690),a=p(a,r,s,i,t[3],14,-187363961),i=p(i,a,r,s,t[8],20,1163531501),s=p(s,i,a,r,t[13],5,-1444681467),r=p(r,s,i,a,t[2],9,-51403784),a=p(a,r,s,i,t[7],14,1735328473),s=g(s,i=p(i,a,r,s,t[12],20,-1926607734),a,r,t[5],4,-378558),r=g(r,s,i,a,t[8],11,-2022574463),a=g(a,r,s,i,t[11],16,1839030562),i=g(i,a,r,s,t[14],23,-35309556),s=g(s,i,a,r,t[1],4,-1530992060),r=g(r,s,i,a,t[4],11,1272893353),a=g(a,r,s,i,t[7],16,-155497632),i=g(i,a,r,s,t[10],23,-1094730640),s=g(s,i,a,r,t[13],4,681279174),r=g(r,s,i,a,t[0],11,-358537222),a=g(a,r,s,i,t[3],16,-722521979),i=g(i,a,r,s,t[6],23,76029189),s=g(s,i,a,r,t[9],4,-640364487),r=g(r,s,i,a,t[12],11,-421815835),a=g(a,r,s,i,t[15],16,530742520),s=f(s,i=g(i,a,r,s,t[2],23,-995338651),a,r,t[0],6,-198630844),r=f(r,s,i,a,t[7],10,1126891415),a=f(a,r,s,i,t[14],15,-1416354905),i=f(i,a,r,s,t[5],21,-57434055),s=f(s,i,a,r,t[12],6,1700485571),r=f(r,s,i,a,t[3],10,-1894986606),a=f(a,r,s,i,t[10],15,-1051523),i=f(i,a,r,s,t[1],21,-2054922799),s=f(s,i,a,r,t[8],6,1873313359),r=f(r,s,i,a,t[15],10,-30611744),a=f(a,r,s,i,t[6],15,-1560198380),i=f(i,a,r,s,t[13],21,1309151649),s=f(s,i,a,r,t[4],6,-145523070),r=f(r,s,i,a,t[11],10,-1120210379),a=f(a,r,s,i,t[2],15,718787259),i=f(i,a,r,s,t[9],21,-343485551),e[0]=x(s,e[0]),e[1]=x(i,e[1]),e[2]=x(a,e[2]),e[3]=x(r,e[3])}function v(e,t,s,i,a,r){return t=x(x(t,e),x(i,r)),x(t<<a|t>>>32-a,s)}function m(e,t,s,i,a,r,n){return v(t&s|~t&i,e,t,a,r,n)}function p(e,t,s,i,a,r,n){return v(t&i|s&~i,e,t,a,r,n)}function g(e,t,s,i,a,r,n){return v(t^s^i,e,t,a,r,n)}function f(e,t,s,i,a,r,n){return v(s^(t|~i),e,t,a,r,n)}function y(e){var t,s=[];for(t=0;t<64;t+=4)s[t>>2]=e.charCodeAt(t)+(e.charCodeAt(t+1)<<8)+(e.charCodeAt(t+2)<<16)+(e.charCodeAt(t+3)<<24);return s}var w="0123456789abcdef".split("");function b(e){for(var t="",s=0;s<4;s++)t+=w[e>>8*s+4&15]+w[e>>8*s&15];return t}function $(e){return function(e){for(var t=0;t<e.length;t++)e[t]=b(e[t]);return e.join("")}(function(e){var t,s=e.length,i=[1732584193,-271733879,-1732584194,271733878];for(t=64;t<=e.length;t+=64)u(i,y(e.substring(t-64,t)));e=e.substring(t-64);var a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];for(t=0;t<e.length;t++)a[t>>2]|=e.charCodeAt(t)<<(t%4<<3);if(a[t>>2]|=128<<(t%4<<3),t>55)for(u(i,a),t=0;t<16;t++)a[t]=0;return a[14]=8*s,u(i,a),i}(e))}function x(e,t){return e+t&4294967295}if("5d41402abc4b2a76b9719d911017c592"!=$("hello")){function x(e,t){var s=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(s>>16)<<16|65535&s}}const L="f5c6a6461fdefb8a6299942dc378c182";let S=Date.now(),k=$(S+"4488d6d52c2bcb9e6b1aca391d92b7e246b31f03"+L);async function C(e="characters",t="",s=""){let i=await IDB.read("marvels",e+(t||s));if(i)return i.data;let a="characters"==e?"?name":"?title";a+="StartsWith="+t+"&",t||(a="?");let r="https://gateway.marvel.com:443/v1/public/"+`${e}${s?"/"+s:""}${a}orderBy=${"characters"==e?"name":"title"}&apikey=${L}&ts=${S}&hash=${k}`,n=await fetch(r).catch();n=await n.json();let o={id:e+(t||s),data:n.data.results};return await IDB.write("marvels",o),n.data.results}function I(e){return new Promise(t=>setTimeout(t,e))}var O={components:{searchListItem:h},template:'\n  <div id="search-list-page" class="container">\n      <div class="switch">\n        <label>\n          Series\n          <input v-model="displayChar" type="checkbox">\n          <span class="lever"></span>\n          Characters\n        </label>\n      </div>\n      <div v-if="!loadedLists" class="spinner">\n      <div class="preloader-wrapper big active">\n        <div class="spinner-layer spinner-yellow-only">\n          <div class="circle-clipper left">\n            <div class="circle"></div>\n          </div><div class="gap-patch">\n            <div class="circle"></div>\n          </div><div class="circle-clipper right">\n            <div class="circle"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div v-else class="hero-list"> \n        <searchListItem v-for="item in activeList" :key="item.id" :data="item" :char="displayChar" @updateFavorite="updateFavorite" />\n      </div>\n    </div>\n  ',data:()=>({displayChar:!0,favoriteCharacters:[],favoriteSeries:[],loadedLists:!1}),computed:{activeList(){return this.displayChar?this.favoriteCharacters:this.favoriteSeries}},methods:{updateFavorite(e){let t=this[this.displayChar?"favoriteCharacters":"favoriteSeries"];t.splice(t.indexOf(t.filter(t=>t.id==e)[0]),1)}},async created(){for(this.$store.commit("setLogo","Favorites");!this.$store.state.user;)await I(20);this.timeout=setTimeout(()=>{M.toast({html:'<div class="toast-text">Loading timeout</div>',classes:"toast",displayLength:2e3}),this.$router.push("/")},this.$store.state.timeoutDuration),await Promise.all(this.$store.state.user.favoriteCharacters.map(async e=>this.favoriteCharacters.push(await C("characters","",e)))),await Promise.all(this.$store.state.user.favoriteSeries.map(async e=>this.favoriteSeries.push(await C("series","",e)))),this.favoriteCharacters=this.favoriteCharacters.flat(),this.favoriteSeries=this.favoriteSeries.flat(),clearTimeout(this.timeout),this.loadedLists=!0}},D={template:'\n    <div id="recieved-messages-page" class="container">\n\n    <div v-if="!loadedLists" class="spinner">\n      <div class="preloader-wrapper big active">\n        <div class="spinner-layer spinner-yellow-only">\n          <div class="circle-clipper left">\n            <div class="circle"></div>\n          </div><div class="gap-patch">\n            <div class="circle"></div>\n          </div><div class="circle-clipper right">\n            <div class="circle"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div v-else class="hero-list">  \n      <div v-for="message in messages" \n      :key="message.itemId" \n      @click="goToDetails(message.itemId, message.type == \'character\')" \n      class="list-item card small waves-effect waves-light recieved-message">\n      <div class="card-image">\n        <img v-if="message.thumbnail" :src="message.thumbnail.path.replace(\'http://\', \'https://\') + \'.\' + message.thumbnail.extension" />\n      </div>\n      <div class="card-content">\n        <p>{{ message.name }}</p> \n        <p>Sender: {{ message.senderName }}</p>\n        <p>Sent: {{ new Date(message.date / 1).toLocaleString() }}</p>\n      </div>\n    </div>\n  </div>\n    </div>\n    ',data:()=>({messages:[],loadedLists:!1}),methods:{goToDetails(e,t){this.$router.push({path:"/details/"+e,query:{char:t}})}},async created(){this.$store.commit("setLogo","Received Messages"),this.timeout=setTimeout(()=>{M.toast({html:'<div class="toast-text">Loading timeout</div>',classes:"toast",displayLength:2e3}),this.$router.push("/")},this.$store.state.timeoutDuration);let e=await IDB.read("received-messages",r.auth.user.id);if(e)this.messages=e.data;else{this.messages=await l.find({receiverId:r.auth.user.id}).toArray();let e={id:r.auth.user.id,data:this.messages};await IDB.write("received-messages",e)}this.messages=await Promise.all(this.messages.map(async e=>{let t=await C("character"==e.type?"characters":"series","",e.itemId);return e.thumbnail=t[0].thumbnail,e.name=t[0].name||t[0].title,e})),clearTimeout(this.timeout),this.loadedLists=!0},beforeDestroy(){clearTimeout(this.timeout)}},T={template:'\n    <div id="friends-page" class="container">\n    <div class="switch">\n      <label>\n        Offline\n        <input v-model="onlineFriends" type="checkbox">\n        <span class="lever"></span>\n        Online\n      </label>\n    </div>\n      <h3>{{ onlineFriends ? \'Online\' : \'Offline\' }}</h3>\n\n      <div v-if="!loadedLists" class="spinner">\n      <div class="preloader-wrapper big active">\n        <div class="spinner-layer spinner-yellow-only">\n          <div class="circle-clipper left">\n            <div class="circle"></div>\n          </div><div class="gap-patch">\n            <div class="circle"></div>\n          </div><div class="circle-clipper right">\n            <div class="circle"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n      <ul v-else>\n        <li v-for="friend in filteredFriends" \n        @click="sendMarvel(friend.uid)"\n        :key="friend.uid"\n        class="friend-username"\n        >{{ friend.username }}</li>\n      </ul>\n    </div>\n  ',data:()=>({onlineFriends:!0,friends:[],toSend:!1,sendData:null,loadedLists:!1}),methods:{async sendMarvel(e){if(!this.sendData)return;this.sendData.receiverId=e;let t={id:(s=(new Date).getTime(),"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=(s+16*Math.random())%16|0;return s=Math.floor(s/16),("x"==e?t:3&t|8).toString(16)}))),message:this.sendData,notify:{title:"New marvel from "+this.$store.state.user.username,content:"Check out this new marvel!",url:this.sendData.url}};var s;if("serviceWorker"in navigator&&"SyncManager"in window){await IDB.write("sync-messages",t);const e=await navigator.serviceWorker.ready;await e.sync.register("sync-send-marvel")}else{console.log("Cannot sync messages");await fetch("/api/send-message",{method:"POST",headers:{"content-type":"application/json"},body:JSON.stringify(t)})}M.toast({html:'<div class="toast-text">Sent Marvel</div>',classes:"toast",displayLength:2e3}),this.$router.push("/")}},computed:{filteredFriends(){return this.friends.filter(e=>e.isOnline==this.onlineFriends&&e.uid!=this.$store.state.user.uid)}},async created(){this.$store.commit("setLogo","Friends"),this.friends=await o.find().asArray(),this.loadedLists=!0,this.toSend=this.$route.query.toSend,this.sendData=this.$route.query.data}},_={template:'\n    <div id="search-page">\n      <div class="row">\n        <div class="input-field search col s10">\n          <i class="material-icons prefix">search</i>\n          <input id="icon_prefix" autocomplete="off" @keyup.enter="doSearch" v-model="searchTerm" type="text">\n          <label for="icon_prefix">Search</label>\n        </div>\n        <button class="btn-floating btn-large btn-flat" @click="doSearch"><i class="material-icons black-text">image_search</i></button>\n      </div>\n\n      <ul class="seach-history" @click="useSearchHistory">\n        <li v-for="item of searchHistory" :key="item.term">{{ item.term }}</li>\n      </ul>\n    </div>\n  ',data:()=>({searchHistory:[],searchTerm:""}),methods:{doSearch(){if(!this.searchTerm.trim())return;this.searchHistory.filter(e=>e.term==this.searchTerm).length>0?this.searchHistory.forEach(e=>e.term==this.searchTerm&&(e.ts=Date.now())):this.searchHistory.push({term:this.searchTerm,ts:Date.now()}),localStorage.setItem("search-history",JSON.stringify(this.searchHistory)),this.$router.push("/search/"+this.searchTerm)},useSearchHistory(e){this.searchTerm=e.target.innerText,this.doSearch()}},created(){this.$store.commit("setLogo","Search"),this.searchHistory=JSON.parse(localStorage.getItem("search-history"))||[],this.searchHistory.sort((e,t)=>e.ts>t.ts?-1:1),M.updateTextFields()}},P={components:{searchListItem:h},template:'\n    <div id="search-list-page" class="container">\n    <div class="switch">\n      <label>\n        Series\n        <input v-model="displayChar" type="checkbox">\n        <span class="lever"></span>\n        Characters\n      </label>\n    </div>\n    <div v-if="!loadedLists" class="spinner">\n      <div class="preloader-wrapper big active">\n        <div class="spinner-layer spinner-yellow-only">\n          <div class="circle-clipper left">\n            <div class="circle"></div>\n          </div><div class="gap-patch">\n            <div class="circle"></div>\n          </div><div class="circle-clipper right">\n            <div class="circle"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n      <div v-else class="hero-list">\n        <searchListItem class="list-item" v-for="item in activeList" :key="item.id" :data="item" :char="displayChar" />\n      </div>\n    </div>\n  ',data:()=>({displayChar:!0,loadedLists:!1}),computed:{activeList(){return this.displayChar?this.$store.state.characterList:this.$store.state.serieList}},async created(){this.$store.commit("setLogo",this.$route.params.term),this.timeout=setTimeout(()=>{M.toast({html:'<div class="toast-text">Loading timeout</div>',classes:"toast",displayLength:2e3}),this.$router.push("/")},this.$store.state.timeoutDuration),this.$store.commit("setCharList",await C("characters",this.$route.params.term)),this.$store.commit("setSerieList",await C("series",this.$route.params.term)),clearTimeout(this.timeout),this.loadedLists=!0},beforeDestroy(){clearTimeout(this.timeout)}},F={template:'\n    <div id="details-page">\n      <div class="marvel-image">  \n        <img v-if="item.thumbnail" :src="item.thumbnail.path.replace(\'http://\', \'https://\') + \'.\' + item.thumbnail.extension" />\n        <button @click="sendMarvel" class="send-marvel-btn btn-floating blue darken-3 btn-large waves-effect waves-light"><i class="material-icons">send</i></button>\n      </div>\n      <div>\n        <h3 class="container">{{ item.name || item.title }}</h3>\n        <p class="container">{{ item.description }}</p>\n      </div>\n    </div>\n  ',data:()=>({item:{name:"",description:""}}),methods:{sendMarvel(){let e={senderId:this.$store.state.user.uid,itemId:""+this.item.id,type:this.$route.query.char?"character":"serie",senderName:this.$store.state.user.username,date:""+Date.now(),url:`/details/${this.item.id}${this.$route.query.char?"?char=true":""}`};this.$router.push({path:"/friends",query:{toSend:!0,data:e}})}},async created(){let e=this.$store.state[this.$route.query.char?"characterList":"serieList"].filter(e=>e.id==this.$route.params.id)[0];e?this.item=e:(this.timeout=setTimeout(()=>{M.toast({html:'<div class="toast-text">Loading timeout</div>',classes:"toast",displayLength:2e3}),this.$router.push("/")},this.$store.state.timeoutDuration),this.result=await C(this.$route.query.char?"characters":"series","",this.$route.params.id),this.item=this.result[0],clearTimeout(this.timeout),this.$store.commit("setLogo",this.item.name||this.item.title))}};async function A(){"Notification"in window&&Notification.requestPermission(async e=>{"granted"!==e?console.log("No notifications permitted!"):await async function(){if(!("serviceWorker"in navigator))return;const e=await navigator.serviceWorker.ready;if(null==await e.pushManager.getSubscription()){let t="BAvY4M_56t_c_9SoNEIkxjjEcc_V55gO2Cm7GPZNHKwTZu2tHcXFiDScshESK29z_tT97I2MLOgNYQIhmyC-SDA";t=function(e){for(var t=(e+"=".repeat((4-e.length%4)%4)).replace(/\-/g,"+").replace(/_/g,"/"),s=window.atob(t),i=new Uint8Array(s.length),a=0;a<s.length;++a)i[a]=s.charCodeAt(a);return i}(t);let s=await e.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:t}),i=await fetch("/api/subscriptions",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({newSub:s,userId:r.auth.user.id})});i=await i.json(),console.log("sub id:",i.subId),await IDB.write("user-data",{uid:"sub-id",id:i.subId})}}()})}var B={template:'\n    <div id="login-page" class="container" autocomplete="off">\n      <h1 class="marvel-logo">Marvellisimo</h1>\n      <div class="input-field">\n        <input id="username" placeholder="Username" v-model="username" type="text" class="validate">\n      </div>\n      <div class="input-field">\n        <input id="email" placeholder="Email" v-model="email" type="email" class="validate">\n      </div>\n      <div class="input-field">\n        <input id="password" @keyup.enter.prevent.stop="login()" placeholder="Password" v-model="password" type="password" class="validate">\n      </div>\n      <div class="login-buttons">\n        <button class="btn" @click.prevent.stop="login()">login</button>\n        <button class="btn" @click.prevent.stop="register()">register</button>\n      </div>\n      <div v-if="loggingIn" class="spinner login-spinner">\n      <div class="preloader-wrapper big active">\n        <div class="spinner-layer spinner-yellow-only">\n          <div class="circle-clipper left">\n            <div class="circle"></div>\n          </div><div class="gap-patch">\n            <div class="circle"></div>\n          </div><div class="circle-clipper right">\n            <div class="circle"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n    </div>\n  ',data:()=>({username:"",email:"",password:"",loggingIn:!1}),methods:{async login(e){this.loggingIn=!0;const{UserPasswordCredential:t}=stitch,s=new t(this.email,this.password),i=await r.auth.loginWithCredential(s).catch(e=>{this.loggingIn=!1,M.toast({html:'<div class="toast-text">Bad username/password</div>',classes:"toast",displayLength:2e3}),console.error(e)});let a;console.log("Signed in user:",i),e?a=await this.createNewUser(i.id):(a=await o.findOne({uid:r.auth.user.id}).catch(e=>{console.error(e)}),console.log("Found user:",a),a.isOnline=!0,a&&await o.findOneAndReplace({uid:a.uid},a).catch(console.error)),this.$store.commit("setUser",a),this.$router.replace("/"),await A();let n=await IDB.read("user-data","sub-id");if(n){let e=await c.findOne({uid:n.id});e.userIds.includes(r.auth.user.id)||e.userIds.push(r.auth.user.id),await c.findOneAndReplace({uid:n.id},e).catch(console.error)}},async register(){const{UserPasswordAuthProviderClient:e}=stitch,t=r.auth.getProviderClient(e.factory);await t.registerWithEmail(this.email,this.password).catch(e=>{M.toast({html:'<div class="toast-text">Bad username/password</div>',classes:"toast",displayLength:2e3}),console.error("Error registering new user:",e)});M.toast({html:'<div class="toast-text">Successfully registered</div>',classes:"toast",displayLength:2e3}),this.login(!0)},async createNewUser(e){const t={_id:new stitch.BSON.ObjectId(e),uid:e,username:this.username,email:this.email,isOnline:!0,favoriteSeries:[],favoriteCharacters:[]};return await o.insertOne(t).catch(e=>{console.error("Error creating new user:",e)})}},created(){console.log("Mounting LoginPage"),r.auth.isLoggedIn&&this.$router.replace("/")},mounted(){M.updateTextFields()}},j={template:`\n    <div id="missing-page" class="container">\n      <div class="row">\n        <div class="one-half column">\n          <h4>Missing Page</h4>\n          <p>Can't find the page: ${location.pathname}</p>\n        </div>\n      </div>\n    </div>\n  `,created(){this.$store.commit("setLogo","Marvellisimo")}};const N=new VueRouter({mode:"history",routes:[{name:"home",path:"/",component:d},{name:"favorites",path:"/favorites",component:O},{name:"login",path:"/login",component:B},{name:"receivedMessages",path:"/received-messages",component:D},{name:"friends",path:"/friends",component:T},{name:"searchPage",path:"/search",component:_},{name:"searchListPage",path:"/search/:term",component:P},{name:"detailsPage",path:"/details/:id",component:F,params:!0},{path:"*",component:j}]}),U=new Vuex.Store({state:{timeoutDuration:5e3,user:null,logo:"Marvellisimo",characterList:[],serieList:[]},mutations:{async setUser(e,t){e.user={...t},t&&await IDB.write("user-data",t),t&&await IDB.write("user-data",{uid:"active-user",id:t.uid||""}),localStorage["active-user"]=t.uid||""},setLogo(e,t){e.logo=t},setCharList(e,t){e.characterList=[...t]},setSerieList(e,t){e.serieList=[...t]}},actions:{async updateUser(e){e.state.user&&await o.findOneAndReplace({uid:e.state.user.uid},e.state.user).catch(console.error),e.commit("setUser",e.state.user)}}});var q={components:{navbar:{template:'\n  <div class="navbar-fixed">\n    <nav class="nav-wrapper">\n      <router-link v-if="showBackArrow" to="/"><i class="material-icons">arrow_back</i></router-link>\n      <p v-else id="arrow-placeholder"></p>\n      <h5>{{ $store.state.logo }}</h5>\n      <i class="material-icons" @click="signOut()">exit_to_app</i>\n    </nav>\n  </div>\n  ',computed:{showBackArrow(){return"/"!=this.$route.path&&"/login"!=this.$route.path}},methods:{async signOut(){this.$store.state.user&&(this.$store.state.user.isOnline=!1),this.$store.state.user&&await o.findOneAndReplace({uid:this.$store.state.user.uid},this.$store.state.user).catch(console.error),r.auth.logout(),this.$store.commit("setUser",null),M.toast({html:'<div class="toast-text">Successfully signed out</div>',classes:"toast",displayLength:2e3}),this.$router.push("/login")}}}},template:'\n    <div id="app">\n      <navbar />\n      <main>\n        <transition enter-active-class="animated slideInUp" mode="out-in">  \n          <router-view class="animation-speed" :key="$route.fullPath" />\n        </transition>\n      </main>\n    </div>\n  ',async created(){if(M.AutoInit(),!r.auth.isLoggedIn)return void this.$router.replace("/login");let e=await IDB.read("user-data",r.auth.user.id);console.log(e),this.$store.commit("setUser",e),setTimeout(async()=>{e=await o.findOne({uid:r.auth.user.id}).catch(e=>{M.toast({html:'\n            <div class="bottom-toast-text">\n              <i class="material-icons">signal_wifi_off</i>\n              You\'re currently offline\n            </div>\n          ',classes:"bottom-toast",displayLength:1/0})}),e&&(this.$store.commit("setUser",e),e.isOnline=!0,e&&await o.findOneAndReplace({uid:e.uid},e).catch(console.error),M.toast({html:'<div class="toast-text">Successfully signed in</div>',classes:"toast",displayLength:2e3}))},50)}};const H=new Vue;new Vue({store:U,router:N,render:e=>e(q)}).$mount("#app"),window.addEventListener("online",()=>{console.log("You are now back online.");let e=document.querySelector(".bottom-toast");M.Toast.getInstance(e).dismiss()}),window.addEventListener("offline",()=>{console.log("You lost connection."),M.toast({html:'\n      <div class="bottom-toast-text">\n        <i class="material-icons">signal_wifi_off</i>\n        You\'re currently offline\n      </div>\n    ',classes:"bottom-toast",displayLength:1/0})})}]);
//# sourceMappingURL=main.js.map